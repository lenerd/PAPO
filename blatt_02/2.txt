# 2.1 GNU Debugger

(gdb) help
List of classes of commands:

aliases -- Aliases of other commands
breakpoints -- Making program stop at certain points
data -- Examining data
files -- Specifying and examining files
internals -- Maintenance commands
obscure -- Obscure features
running -- Running the program
stack -- Examining the stack
status -- Status inquiries
support -- Support facilities
tracepoints -- Tracing of program execution without stopping the program
user-defined -- User-defined commands

Type "help" followed by a class name for a list of commands in that class.
Type "help all" for the list of all commands.
Type "help" followed by command name for full documentation.
Type "apropos word" to search for commands related to "word".
Command name abbreviations are allowed if unambiguous.

(gdb) break factorial
Breakpoint 1 at 0x400553: file factorial.c, line 23.

(gdb) run
Starting program: /home/lennart/Dokumente/Uni/SoSe_2015/PAPO/abgaben/blatt_02/2/factorial 

Breakpoint 1, factorial (n=5) at factorial.c:23
23	    if (n <= 1)

(gdb) bt
#0  factorial (n=5) at factorial.c:23
#1  0x0000000000400522 in main () at factorial.c:14

(gdb) frame 1
#1  0x0000000000400522 in main () at factorial.c:14
14	    f = factorial(n);

(gdb) list
9	
10	int main (void)
11	{
12	    uint64_t f, n;
13	    n = 5;
14	    f = factorial(n);
15	    printf("%" PRIu64 "! = %" PRIu64 "\n", n, f);
16	    
17	    return EXIT_SUCCESS;
18	}

(gdb) frame 0
#0  factorial (n=5) at factorial.c:23
23	    if (n <= 1)

(gdb) print n
$1 = 5

(gdb) ptype n
type = const unsigned long

# 2.2 Valgrind
## Ausgabe ./array
$ ./array
uninitialisierter Wert array[0] == 4195872
ungültiges Element array[5] == 32765
Wert aus Funktion array_stack()[0] == 0
Wert aus Funktion array_heap()[0] == 0

## Ausgabe valgrind -leak-check ./array
$ valgrind -leak-check ./array 
valgrind: Bad option: -leak-check
valgrind: Use --help for more information or consult the user manual.

$ valgrind --leak-check=full ./array
==13243== Memcheck, a memory error detector
==13243== Copyright (C) 2002-2013, and GNU GPL'd, by Julian Seward et al.
==13243== Using Valgrind-3.10.1 and LibVEX; rerun with -h for copyright info
==13243== Command: ./array
==13243== 
==13243== Conditional jump or move depends on uninitialised value(s)
==13243==    at 0x4E7DFD0: vfprintf (in /usr/lib/libc-2.21.so)
==13243==    by 0x4E85138: printf (in /usr/lib/libc-2.21.so)
==13243==    by 0x400561: main (array.c:13)
==13243== 
==13243== Use of uninitialised value of size 8
==13243==    at 0x4E7A2DB: _itoa_word (in /usr/lib/libc-2.21.so)
==13243==    by 0x4E7E2B8: vfprintf (in /usr/lib/libc-2.21.so)
==13243==    by 0x4E85138: printf (in /usr/lib/libc-2.21.so)
==13243==    by 0x400561: main (array.c:13)
==13243== 
==13243== Conditional jump or move depends on uninitialised value(s)
==13243==    at 0x4E7A2E5: _itoa_word (in /usr/lib/libc-2.21.so)
==13243==    by 0x4E7E2B8: vfprintf (in /usr/lib/libc-2.21.so)
==13243==    by 0x4E85138: printf (in /usr/lib/libc-2.21.so)
==13243==    by 0x400561: main (array.c:13)
==13243== 
==13243== Conditional jump or move depends on uninitialised value(s)
==13243==    at 0x4E7E329: vfprintf (in /usr/lib/libc-2.21.so)
==13243==    by 0x4E85138: printf (in /usr/lib/libc-2.21.so)
==13243==    by 0x400561: main (array.c:13)
==13243== 
==13243== Conditional jump or move depends on uninitialised value(s)
==13243==    at 0x4E7E0AA: vfprintf (in /usr/lib/libc-2.21.so)
==13243==    by 0x4E85138: printf (in /usr/lib/libc-2.21.so)
==13243==    by 0x400561: main (array.c:13)
==13243== 
==13243== Conditional jump or move depends on uninitialised value(s)
==13243==    at 0x4E7E13A: vfprintf (in /usr/lib/libc-2.21.so)
==13243==    by 0x4E85138: printf (in /usr/lib/libc-2.21.so)
==13243==    by 0x400561: main (array.c:13)
==13243== 
uninitialisierter Wert array[0] == 4195872
==13243== Conditional jump or move depends on uninitialised value(s)
==13243==    at 0x4E7DFD0: vfprintf (in /usr/lib/libc-2.21.so)
==13243==    by 0x4E85138: printf (in /usr/lib/libc-2.21.so)
==13243==    by 0x400575: main (array.c:14)
==13243== 
==13243== Use of uninitialised value of size 8
==13243==    at 0x4E7A2DB: _itoa_word (in /usr/lib/libc-2.21.so)
==13243==    by 0x4E7E2B8: vfprintf (in /usr/lib/libc-2.21.so)
==13243==    by 0x4E85138: printf (in /usr/lib/libc-2.21.so)
==13243==    by 0x400575: main (array.c:14)
==13243== 
==13243== Conditional jump or move depends on uninitialised value(s)
==13243==    at 0x4E7A2E5: _itoa_word (in /usr/lib/libc-2.21.so)
==13243==    by 0x4E7E2B8: vfprintf (in /usr/lib/libc-2.21.so)
==13243==    by 0x4E85138: printf (in /usr/lib/libc-2.21.so)
==13243==    by 0x400575: main (array.c:14)
==13243== 
==13243== Conditional jump or move depends on uninitialised value(s)
==13243==    at 0x4E7E329: vfprintf (in /usr/lib/libc-2.21.so)
==13243==    by 0x4E85138: printf (in /usr/lib/libc-2.21.so)
==13243==    by 0x400575: main (array.c:14)
==13243== 
==13243== Conditional jump or move depends on uninitialised value(s)
==13243==    at 0x4E7E0AA: vfprintf (in /usr/lib/libc-2.21.so)
==13243==    by 0x4E85138: printf (in /usr/lib/libc-2.21.so)
==13243==    by 0x400575: main (array.c:14)
==13243== 
==13243== Conditional jump or move depends on uninitialised value(s)
==13243==    at 0x4E7E13A: vfprintf (in /usr/lib/libc-2.21.so)
==13243==    by 0x4E85138: printf (in /usr/lib/libc-2.21.so)
==13243==    by 0x400575: main (array.c:14)
==13243== 
ungültiges Element array[5] == 15
==13243== Conditional jump or move depends on uninitialised value(s)
==13243==    at 0x4E7DFD0: vfprintf (in /usr/lib/libc-2.21.so)
==13243==    by 0x4E85138: printf (in /usr/lib/libc-2.21.so)
==13243==    by 0x40058D: main (array.c:15)
==13243== 
==13243== Use of uninitialised value of size 8
==13243==    at 0x4E7A2DB: _itoa_word (in /usr/lib/libc-2.21.so)
==13243==    by 0x4E7E2B8: vfprintf (in /usr/lib/libc-2.21.so)
==13243==    by 0x4E85138: printf (in /usr/lib/libc-2.21.so)
==13243==    by 0x40058D: main (array.c:15)
==13243== 
==13243== Conditional jump or move depends on uninitialised value(s)
==13243==    at 0x4E7A2E5: _itoa_word (in /usr/lib/libc-2.21.so)
==13243==    by 0x4E7E2B8: vfprintf (in /usr/lib/libc-2.21.so)
==13243==    by 0x4E85138: printf (in /usr/lib/libc-2.21.so)
==13243==    by 0x40058D: main (array.c:15)
==13243== 
==13243== Conditional jump or move depends on uninitialised value(s)
==13243==    at 0x4E7E329: vfprintf (in /usr/lib/libc-2.21.so)
==13243==    by 0x4E85138: printf (in /usr/lib/libc-2.21.so)
==13243==    by 0x40058D: main (array.c:15)
==13243== 
==13243== Conditional jump or move depends on uninitialised value(s)
==13243==    at 0x4E7E0AA: vfprintf (in /usr/lib/libc-2.21.so)
==13243==    by 0x4E85138: printf (in /usr/lib/libc-2.21.so)
==13243==    by 0x40058D: main (array.c:15)
==13243== 
==13243== Conditional jump or move depends on uninitialised value(s)
==13243==    at 0x4E7E13A: vfprintf (in /usr/lib/libc-2.21.so)
==13243==    by 0x4E85138: printf (in /usr/lib/libc-2.21.so)
==13243==    by 0x40058D: main (array.c:15)
==13243== 
Wert aus Funktion array_stack()[0] == 0
Wert aus Funktion array_heap()[0] == 4
==13243== 
==13243== HEAP SUMMARY:
==13243==     in use at exit: 20 bytes in 1 blocks
==13243==   total heap usage: 1 allocs, 0 frees, 20 bytes allocated
==13243== 
==13243== 20 bytes in 1 blocks are definitely lost in loss record 1 of 1
==13243==    at 0x4C29F90: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==13243==    by 0x4005EB: array_heap (array.c:31)
==13243==    by 0x400592: main (array.c:16)
==13243== 
==13243== LEAK SUMMARY:
==13243==    definitely lost: 20 bytes in 1 blocks
==13243==    indirectly lost: 0 bytes in 0 blocks
==13243==      possibly lost: 0 bytes in 0 blocks
==13243==    still reachable: 0 bytes in 0 blocks
==13243==         suppressed: 0 bytes in 0 blocks
==13243== 
==13243== For counts of detected and suppressed errors, rerun with: -v
==13243== Use --track-origins=yes to see where uninitialised values come from
==13243== ERROR SUMMARY: 33 errors from 19 contexts (suppressed: 0 from 0)

# 2.3 Paralleles Debugging mit DDT

Es gibt folgende Step-Möglichkeiten
* step into
    Führt die nächste Zeile aus, springt ggf. an den Anfang einer gerufenen Funktion.
* step over
    Führt die nächste Zeile aus.
* step out
    Springt zum Ende der aktuellen Funktion.

Vergleich von Variablen über mehrere Prozesse:
Zunächst klickt man in eine Zeile, in der die zu vergleichende Variable verwendet wird.
Rechts, im Fenster Current Line(s) wird der aktuelle Wert im aktuellen Prozess aufgeführt.
Zusätzlich wird die Werteverteilung über alle Prozesse visualisiert.
Für mehr Informationen, kann ein Fenster durch Klick auf den Variablennamen geöffnet werden.

In das Evaluate-Fenster lassen sich Ausdrücke eintragen, deren aktuelle Werte bei jedem Schritt
angegeben werden.

Das Wechseln zu einem anderen Prozess ist möglich, indem man auf die entsprechende Nummer in der
blauen Leiste klickt.

Visualisierung von Arrays ermöglich der Multi-Dimensional Array Viewer.
Dieser lässt sich über das Kontextmenü im Current Line(s) Fenster unter „View Array“ öffnen.
